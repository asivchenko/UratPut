1. –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è (Abstraction)
--------------------------
    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –°–∫—Ä—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.

    –í Java: —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.

interface Animal {
    void makeSound();
}

2. –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è (Encapsulation)
------------------------------------------
    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –ó–∞—â–∏—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

    –í Java: –ø–æ–ª—è –∫–ª–∞—Å—Å–∞ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è private, –¥–æ—Å—Ç—É–ø –∫ –Ω–∏–º —á–µ—Ä–µ–∑ get/set –º–µ—Ç–æ–¥—ã.

public class Person {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

3. –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (Inheritance)
-------------------------------------------------------
    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ–º—É –∫–ª–∞—Å—Å—É –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ.

    –í Java: —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ extends.

public class Animal {
    public void makeSound() {
        System.out.println("Some sound");
    }
}

public class Dog extends Animal {
    public void makeSound() {
        System.out.println("Bark");
    }
}

4. –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º (Polymorphism)
---------------------------------
    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç–∞–º —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞.

    –í Java: –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (override) –∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É (overload).

public class Main {
    public static void makeAnimalSound(Animal animal) {
        animal.makeSound();
    }

    public static void main(String[] args) {
        Animal dog = new Dog();
        makeAnimalSound(dog); // –í—ã–≤–µ–¥–µ—Ç "Bark"
    }
}

üîπ –ü—Ä–∏–Ω—Ü–∏–ø –ë–∞—Ä–±–∞—Ä—ã –õ–∏—Å–∫–æ–≤ (Liskov Substitution Principle, LSP)

    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
    –û–±—ä–µ–∫—Ç—ã –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω—è–µ–º—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–æ–≤ –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

    –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:

class Bird {
    public void fly() {
        System.out.println("Flying...");
    }
}

class Sparrow extends Bird {
    // –ù–∞—Å–ª–µ–¥—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚Äî —É–º–µ–µ—Ç –ª–µ—Ç–∞—Ç—å
}

    ‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –õ–∏—Å–∫–æ–≤:

class Bird {
    public void fly() {
        System.out.println("Flying...");
    }
}

class Ostrich extends Bird {
    @Override
    public void fly() {
        throw new UnsupportedOperationException("Ostriches can't fly!");
    }
}

–ó–¥–µ—Å—å Ostrich –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–º, –≥–¥–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è Bird, –µ—Å–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ª—é–±–æ–π Bird —É–º–µ–µ—Ç –ª–µ—Ç–∞—Ç—å ‚Äî —ç—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ LSP.
üîπ –í—ã–≤–æ–¥:

–ü—Ä–∏–Ω—Ü–∏–ø –õ–∏—Å–∫–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. 
–í Java —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–µ—Ä–∞—Ä—Ö–∏–π –∫–ª–∞—Å—Å–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–≥—É —Ç–∞–∫–∂–µ –æ–±—ä—è—Å–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID (–Ω–∞–ø—Ä–∏–º–µ—Ä, Open/Closed, Dependency Inversion –∏ –¥—Ä.) –∏–ª–∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.
–í—ã —Å–∫–∞–∑–∞–ª–∏:
–ü—Ä–∏–Ω—Ü–∏–ø—ã Solid
ChatGPT —Å–∫–∞–∑–∞–ª:

–ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID ‚Äî —ç—Ç–æ –ø—è—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, 
–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–∏–±–∫–∏–π, —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–¥. –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ SOLID —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
-------------------------------------------------------------------------------------
üîπ S ‚Äî Single Responsibility Principle (–ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏)

    –°—É—Ç—å:
    –£ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Äî –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞ –æ–¥–Ω—É —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.

    –ù–∞—Ä—É—à–µ–Ω–∏–µ:

class Report {
    public String getText() { ... }
    public void saveToFile(String path) { ... } // —É–∂–µ –Ω–µ –µ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
}

    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ:

class Report {
    public String getText() { ... }
}

class ReportSaver {
    public void saveToFile(Report report, String path) { ... }
}

üîπ O ‚Äî Open/Closed Principle (–ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏)

    –°—É—Ç—å:
    –ö–ª–∞—Å—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –Ω–æ –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.

    –ù–∞—Ä—É—à–µ–Ω–∏–µ: –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –º–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.

    ‚úÖ –†–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º (–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã):

interface Shape {
    double area();
}

class Circle implements Shape { ... }
class Rectangle implements Shape { ... }

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤.

üîπ L ‚Äî Liskov Substitution Principle (–ü—Ä–∏–Ω—Ü–∏–ø –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ–∏—Å–∫–æ–≤)

    –°—É—Ç—å:
    –ü–æ–¥–∫–ª–∞—Å—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏.

    –ù–∞—Ä—É—à–µ–Ω–∏–µ:

class Bird {
    void fly() {}
}

class Penguin extends Bird {
    void fly() { throw new UnsupportedOperationException(); } // –ø–ª–æ—Ö–æ
}

    ‚úÖ –†–µ—à–µ–Ω–∏–µ: –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤—ã–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å FlyingBird.

üîπ I ‚Äî Interface Segregation Principle (–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤)

    –°—É—Ç—å:
    –ù–µ –∑–∞—Å—Ç–∞–≤–ª—è–π –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç.

    –ù–∞—Ä—É—à–µ–Ω–∏–µ:

interface Worker {
    void work();
    void eat();
}

class Robot implements Worker {
    public void work() { ... }
    public void eat() { /* ?? */ } // –ª–∏—à–Ω–∏–π –º–µ—Ç–æ–¥
}

    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ:

interface Workable { void work(); }
interface Eatable { void eat(); }

class Robot implements Workable { ... }
class Human implements Workable, Eatable { ... }

üîπ D ‚Äî Dependency Inversion Principle (–ü—Ä–∏–Ω—Ü–∏–ø –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)

    –°—É—Ç—å:
    –ó–∞–≤–∏—Å–µ—Ç—å –Ω—É–∂–Ω–æ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤.

    –ù–∞—Ä—É—à–µ–Ω–∏–µ:

class MySQLDatabase {
    void connect() { ... }
}

class DataManager {
    private MySQLDatabase db = new MySQLDatabase(); // –∂–µ—Å—Ç–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
}

    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ:

interface Database {
    void connect();
}

class MySQLDatabase implements Database { ... }
class DataManager {
    private Database db;

    public DataManager(Database db) {
        this.db = db;
    }
}

üß† –ò—Ç–æ–≥:
–ü—Ä–∏–Ω—Ü–∏–ø	–ö—Ä–∞—Ç–∫–æ
S	–û–¥–∏–Ω –∫–ª–∞—Å—Å ‚Äî –æ–¥–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
O	–ö–ª–∞—Å—Å—ã —Ä–∞—Å—à–∏—Ä—è—é—Ç—Å—è, –Ω–æ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
L	–ü–æ–¥–∫–ª–∞—Å—Å –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å
I	–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –º–∞–ª–µ–Ω—å–∫–∏–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
D	–ó–∞–≤–∏—Å–∏–º –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π