принципы REST API:
1. Клиент-серверная архитектура
 
    Клиент (например, браузер, мобильное приложение) и сервер чётко разделены.
 
    Клиент отвечает за интерфейс пользователя, сервер — за обработку запросов и работу с данными.
 
    Это упрощает развитие и масштабирование систем.
 
2. Отсутствие состояния (statelessness)
 
    Каждый HTTP-запрос от клиента к серверу должен содержать всю необходимую информацию для его обработки.
 
    Сервер не хранит информацию о предыдущих запросах клиента.
 
    Это улучшает масштабируемость, но требует, чтобы клиент сам управлял состоянием (например, токены авторизации передавались каждый раз).
 
3. Кешируемость (cacheability)
 
   a) Ответы сервера должны чётко указывать, могут ли они быть закешированы и на какой срок.
 
    Ответы могут явно маркироваться как кэшируемые или нет, чтобы повысить производительность и снизить нагрузку.
 
   б) HTTP-заголовки (Cache-Control, ETag, Last-Modified) управляют этим процессом
 
    Это снижает нагрузку на сервер и повышает производительность клиента.
 
4. Единообразие интерфейса (uniform interface)
 
Это ключевой принцип REST, включающий следующие аспекты:
 
    Использование стандартных HTTP-методов:
 
        GET — получить данные
 
        POST — создать
 
        PUT — обновить
 
        DELETE — удалить
 
    Ресурсы определяются URI (Uniform Resource Identifier):
 
        Пример: /users/42 — доступ к пользователю с id = 42
 
    Стандартизованные форматы данных:
 
        Обычно JSON или XML
 
    Стандартизованные коды ответа:
 
        200 OK, 201 Created, 204 No Content, 400 Bad Request, 404 Not Found, 500 Internal Server Error и др.
 
5. Многоуровневая система (Layered system)
 
    REST-система может быть построена из нескольких уровней (прокси, шлюзы, балансировщики нагрузки).
 
    Каждый уровень не знает о внутреннем устройстве других.
 
6. Возможность код по требованию (Code on Demand — необязательный принцип)
 
    Сервер может отправлять исполняемый код клиенту (например, скрипты JavaScript).
 
    Используется редко и не является обязательным для REST.
 
7. Ресурс-ориентированность
 
    Основная идея REST: работа с ресурсами (пользователи, заказы, товары и т.д.), которые представляются в виде URL.
 
    Манипуляция ими происходит через стандартные методы HTTP.
 